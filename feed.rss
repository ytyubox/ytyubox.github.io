<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>游諭 Swift Dev 🦄</title><description>iOS 開發者, 喜歡研究新事物, 生酮食用者</description><link>https://ytyubox.github.io/</link><language>zh</language><lastBuildDate>Sun, 23 Feb 2020 07:09:04 +0000</lastBuildDate><pubDate>Sun, 23 Feb 2020 07:09:04 +0000</pubDate><ttl>250</ttl><atom:link href="https://ytyubox.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://ytyubox.github.io/posts/SwiftCLI-helloworld</guid><title>使用 Swift Package Manager 建立 Command line tool</title><description>如何使用 Swift Package Manager(SPM) 與 Linux/Unix 互動</description><link>https://ytyubox.github.io/posts/SwiftCLI-helloworld</link><pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>使用 Swift Package Manager 建立 Command line tool</h1><p>Command line tool 有時候可以方便的處理一些常見的任務，有時候可以將開放中遇到的瑣碎事情自動化處理，例如 <a href="https://github.com/yonaskolb/XcodeGen">XcodeGen</a>就是一個有趣的應用。這篇文章將教你如何使用 Swift Package Manager(SPM) 與 Linux/Unix 互動。</p><h2>先備知識</h2><ol><li>基礎 Swift 語法知識，若以 Swift.org 的Language guide 目錄為標準，則是 <code>The Basic</code> 至 <code>Methods</code>。</li><li>基礎 Swift <code>Package.init</code> 參數使用，如 <code>name</code>, <code>dependencies</code>, <code>targets</code>。</li><li>基礎 Linux 語法知識，如 <code>ls -alR</code>, <code>Date</code>, <code>whoami</code>。</li></ol><h2>建立可執行的SPM - Hello world</h2><p>我們可以使用 Swift package manager 來建立一個新的 Package project。 如果你對 terminal 熟悉的話，可以閱讀更詳細的文件： <a href="https://github.com/apple/swift-package-manager/blob/master/Documentation/Usage.md">Swift-package-manager/Usage.md</a>。</p><pre><code>$ swift package <span class="keyword">init</span> --type executable --name helloworld
</code></pre><p>這段指令執行了一下事情： 在當前目錄建立一個名為 <code>helloworld</code> 的 可執行的Swift package。</p><p>你可以看到當前目錄建立了一些檔案，下面是使用 <a href="https://formulae.brew.sh/formula/tree"><code>tree</code></a> 的檔案夾結構：</p><pre><code>.
├── <span class="type">Package</span>.<span class="property">swift</span>
├── <span class="type">README</span>.<span class="property">md</span>
├── <span class="type">Sources</span>/
│   └── helloworld/
│       └── main.<span class="property">swift</span>
└── <span class="type">Tests</span>/
    ├── <span class="type">LinuxMain</span>.<span class="property">swift</span>
    └── helloworldTests/
        ├── <span class="type">XCTestManifests</span>.<span class="property">swift</span>
        └── helloworldTests.<span class="property">swift</span>
</code></pre><p>這時我們可以透過以下指令直接執行這個程式</p><pre><code>$ swift build
$ swift run
<span class="type">Hello</span>, world!
</code></pre><p>如此一來就完成基礎的 Command line tool 了！</p><h2><code>Package.swift</code> 取代了 <code>.xcodeproj</code></h2><p>若是你有 Xcode 11, 可以直接打開 <code>Package.swift</code> 就會自動 link 所有檔案並建立 <code>.swiftpm</code></p><pre><code>$ <span class="keyword">open</span> <span class="type">Package</span>.<span class="property">swift</span>
</code></pre><p>可以看到 Package.swift 成為在 XCode 的第一個檔案，以往熟悉的 <code>.xcodeproj</code>不見了。</p><img src="https://i.imgur.com/0e7f6XY.png"/><h2>在執行檔使用第三方函式庫</h2><p>在這裏我們為 helloworld 增加讀取 arguments 的功能，我們可以使用其他已經完善的第三方函式庫，這次我們使用 <code>SPMUtility</code>， 這是來自 Apple 的開源專案，SPM 可以透過 Git 目錄的讀取，執行套件管理並安裝到專案中。我們在 <code>Package.swift</code> 中套用以下的修改：</p><pre><code><span class="comment">// swift-tools-version:5.1</span>

<span class="keyword">import</span> PackageDescription

<span class="keyword">let</span> package = <span class="type">Package</span>(
	name: <span class="string">"helloworld"</span>,
	dependencies: [
		.<span class="call">package</span>(url: <span class="string">"https://github.com/apple/swift-package-manager.git"</span>, from: <span class="string">"0.1.0"</span>)
	],
	targets: [
		.<span class="call">target</span>(
			name: <span class="string">"helloworld"</span>,
			dependencies: [<span class="string">"SPMUtility"</span>]),
		.<span class="call">testTarget</span>(
			name: <span class="string">"helloworldTests"</span>,
			dependencies: [<span class="string">"helloworld"</span>]),
	]
)
</code></pre><blockquote><p>因為函式庫的大小較大，建議網路速度較慢的讀者在這裏先回到 terminal 執行 <code>swift build</code>。</p></blockquote><p>要注意一旦編輯 <code>Package.swift</code> 檔後，必須使用主動儲存變更，XCode 才會更新專案，我們可以使用 File &gt; Save 來主動儲存。 <img src="https://i.imgur.com/S0KXjw8.png"/></p><h2>使用 <code>SPMUtility</code> 讀取 Arguments 與支援其他應用。</h2><p>為了實現讀取 Arguments 的功能，我們要到 <code>main.swift</code> 編寫程式碼！</p><p>首先，通過 import Foundation，我們取得使用者輸入的 Arguments。</p><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> SPMUtility

<span class="keyword">let</span> arguments = <span class="type">ProcessInfo</span>.<span class="property">processInfo</span>.<span class="property">arguments</span>[<span class="number">1</span>...]

<span class="call">print</span>(<span class="string">"Hello, world!"</span>)
</code></pre><p>使用 ArgumentParser 使 Swift 可以讀取 Arguments。</p><pre><code><span class="keyword">let</span> parser = <span class="type">ArgumentParser</span>(usage: <span class="string">"&lt;options&gt;"</span>, overview: <span class="string">"A Swift command-line tool to say hello"</span>)
<span class="keyword">let</span> nameArgument = parser.<span class="call">add</span>(option: <span class="string">"--name"</span>, shortName: <span class="string">"-n"</span>, kind: <span class="type">String</span>.<span class="keyword">self</span>, usage: <span class="string">"The name to greeting"</span>)
<span class="keyword">let</span> repeatArgument = parser.<span class="call">add</span>(option: <span class="string">"--repeat"</span>, shortName: <span class="string">"-r"</span>, kind: <span class="type">Int</span>.<span class="keyword">self</span>, usage: <span class="string">"The repeat count of Hello"</span>)
</code></pre><p>我們建立了單一 Parser，加入兩個可用的參數，<code>--name</code> 和 <code>--repeat</code>，透過 shortName 的參數建立各自的別名，kind 則建立指定的 Swift 型別。</p><p>接下來我們透過邏輯完成這個應用程式。</p><pre><code><span class="keyword">import</span> SPMUtility
<span class="keyword">import</span> Foundation

<span class="keyword">let</span> arguments = <span class="type">ProcessInfo</span>.<span class="property">processInfo</span>.<span class="property">arguments</span>[<span class="number">1</span>...]

<span class="keyword">let</span> parser = <span class="type">ArgumentParser</span>(usage: <span class="string">"&lt;options&gt;"</span>, overview: <span class="string">"A Swift command-line tool to say hello"</span>)
<span class="keyword">let</span> nameArgument = parser.<span class="call">add</span>(option: <span class="string">"--name"</span>, shortName: <span class="string">"-n"</span>, kind: <span class="type">String</span>.<span class="keyword">self</span>, usage: <span class="string">"The name to greeting"</span>)
<span class="keyword">let</span> repeatArgument = parser.<span class="call">add</span>(option: <span class="string">"--repeat"</span>, shortName: <span class="string">"-r"</span>, kind: <span class="type">Int</span>.<span class="keyword">self</span>, usage: <span class="string">"The repeat count of Hello"</span>)

<span class="keyword">do</span> {
    <span class="keyword">let</span> parsedArguments = <span class="keyword">try</span> parser.<span class="call">parse</span>(<span class="type">Array</span>(arguments))
    <span class="keyword">let</span> name = parsedArguments.<span class="call">get</span>(nameArgument) ?? <span class="string">"world"</span>
    <span class="keyword">var</span> repeatCount = parsedArguments.<span class="call">get</span>(repeatArgument) ?? <span class="number">0</span>
	repeatCount = repeatCount &gt; <span class="number">0</span> ? repeatCount : <span class="number">1</span>
	<span class="keyword">var</span> helloRepeat = [<span class="string">"Hello"</span>]
	<span class="keyword">for _ in</span> <span class="number">1</span>..&lt;repeatCount {
		helloRepeat.<span class="call">append</span>(<span class="string">"hello"</span>)
	}
	<span class="keyword">let</span> holloSentence = helloRepeat.<span class="call">joined</span>(separator: <span class="string">", "</span>)
    <span class="call">print</span>(<span class="string">"</span>\(holloSentence)<span class="string">,</span> \(name)<span class="string">"</span>)
} <span class="keyword">catch</span> {
    <span class="call">print</span>(<span class="string">"helloworld greeting failed:</span> \(error)<span class="string">"</span>)
}

</code></pre><p>現在，我們來測試看看！在 terminal 裡執行以下指令，你應該看到應用程式的結果。</p><pre><code>$ swift run helloworld --name yu --<span class="keyword">repeat</span> <span class="number">3</span>
<span class="type">Hello</span>, hello, hello, yu
</code></pre><p>ArgumentParser 同時也提供 <code>--help</code> 的功能。</p><pre><code>$ swift run swift run helloworld --help
<span class="type">OVERVIEW</span>: <span class="type">A Swift</span> command-line tool to say hello

<span class="type">USAGE</span>: helloworld &lt;options&gt;

<span class="type">OPTIONS</span>:
  --name, -n     <span class="type">The</span> title to greeting
  --<span class="keyword">repeat</span>, -r   <span class="type">The</span> <span class="keyword">repeat</span> count of <span class="type">Hello</span>
  --help         <span class="type">Display</span> available options
</code></pre><h2>將 SPM 打包並安裝到 Unix 上</h2><p>在經歷了各種測試後，我們的 helloworld 已經可以作為一個日常的使用工具，透過以下的方式，將執行檔安裝到 terminal 上。</p><pre><code>$ swift build --configuration release
$ cp -f .<span class="dotAccess">build</span>/release/helloworld /usr/local/bin/helloworld
</code></pre><p>如此一來，就可以使用了！</p><pre><code>$ helloworld --help
<span class="type">OVERVIEW</span>: <span class="type">A Swift</span> command-line tool to say hello

<span class="type">USAGE</span>: helloworld &lt;options&gt;

<span class="type">OPTIONS</span>:
  --name, -n     <span class="type">The</span> title to greeting
  --<span class="keyword">repeat</span>, -r   <span class="type">The</span> <span class="keyword">repeat</span> count of <span class="type">Hello</span>
  --help         <span class="type">Display</span> available options
</code></pre><p>以上，就是如何製作一個CLI！</p>]]></content:encoded></item><item><guid isPermaLink="true">https://ytyubox.github.io/posts/2020/02/12/CryptoKit</guid><title>iOS 13 針對加密的framework：CryptoKit</title><description>介紹 CryptoKit 與 MD5 的使用</description><link>https://ytyubox.github.io/posts/2020/02/12/CryptoKit</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>iOS 13 針對加密的framework：CryptoKit</h1><p>以往要使用加密的函式時，需要接觸 C api，依照 StackOverflow 上的解答，可以使用 <code>CC_MD5</code></p><blockquote><p>在 C 語言 需 <code>#include &lt;openssl/md4.h&gt;</code></p></blockquote><p>StackOverflow link :https://stackoverflow.com/a/32166735/10172299</p><h2>iOS 的 CryptoKit</h2><pre><code><span class="keyword">import</span> CryptoKit

<span class="keyword">var</span> md5 = <span class="type">Insecure</span>.<span class="type">MD5</span>()

md5.<span class="call">update</span>(data: <span class="string">"1234567890"</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)!)

<span class="keyword">let</span> digest: <span class="type">Insecure</span>.<span class="type">MD5</span>.<span class="type">Digest</span> = md5.<span class="call">finalize</span>()

<span class="call">print</span>(digest)
<span class="comment">// MD5 digest: e807f1fcf82d132f9bb018ca6738a19f</span>
</code></pre><h2>詳細的 WWDC</h2><p>WWDC 2019 - session 709 - Cryptography and Your Apps: https://developer.apple.com/videos/play/wwdc2019/709/</p>]]></content:encoded></item><item><guid isPermaLink="true">https://ytyubox.github.io/posts/2020/01/28/super-useful-mac-tip</guid><title>超級超好用的蘋果電腦密技</title><description>介紹一些要用的 macOS 使用方式</description><link>https://ytyubox.github.io/posts/2020/01/28/super-useful-mac-tip</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>超級超好用的蘋果電腦密技 (一) 文字編輯篇</h1><p>我認識很多朋友因為覺得 macOS 在使用上比 Windows 方便而買了一台 MacBook, 但是由於對作業系統的整體邏輯不熟, 常常會有許多問題請教. 例如輸入法切換, 好用的工具程式等等. 這次介紹我的 macOS 日常使用的技巧與一些配置. 這次是在 macOS 10.15.2 的環境下所下的指令. 文章有提供一些練習的方式, 如果覺得不錯可以留言給我一些回饋.</p><h2>文字編輯方式</h2><h3>1. Windows 的向後刪除</h3><p>在中文與英文一般的方式下, <code>delete</code> 的文字刪除方向是向左刪除, 也就是文字段落的前方. 在 Windows 上, 可以使用 <code>DEL</code> 來向左刪除, 而 macOS 的可以使用 <code>fn</code> + <code>delete</code> 來達到同樣效果.</p><label>在這練習</label><textarea>"點我進入編輯模式: 使用 fn + delete 來反向刪除"</textarea><h3>2. 快速移動文字指標</h3><p>很多時候會有移動文字指標並繼續打字的情況發生, 在 macOS 可以使用 <code>option</code> + <code>左右箭頭</code>, 來依照文字快速移動, 在單行的文字修改可以快速跳躍文字段落. 如果想快速移動到單行的最前/最後, 可以使用 <code>command</code> + <code>左右箭頭</code> 來移動, 我在打這個段落的時候就使用很多次這個技巧, 非常實用.</p><div class "practice">
<label>在這練習</label>
<textarea>點我進入編輯模式: 使用 option + 左右箭頭, 快速移動 CURSOR 到上一個/下一個單字(單字範圍由 macOS 決定的)</textarea>
<textarea>點我進入編輯模式: 使用 command + 左右箭頭, 快速移動 cursor 到一行的最前與最後</textarea>
</div><h3>3. 段落選取方式</h3><p>可以用鍵盤和觸碰版快速完成文字選取的任務.</p><p>鍵盤使用類似上面移動文字指標的方式, 不過這個要加上 <code>shift</code>, 可以在段落中間使用 <code>command</code> + <code>shift</code> + <code>左右箭頭</code>, 選取一半的文字.</p><div class "practice">
    <label>在這練習</label>
    <textarea>"點我進入編輯模式:  使用 shift + command/optional + 箭頭來快速選取文字, shift 通常都是複選的指令"</textarea>
</div><p>觸屏版可以使用 3 指移動的方式選取, 這功能需要一系列的設定: 如果你的 Mac 配備「 <a href="https://en.wikipedia.org/wiki/Force_Touch">力度觸控軌跡板</a> 」，開啟三指拖曳功能的步驟如下。</p><ol>
    <li>
        打開「系統偏好設定」的「輔助使用」。
        <img src="https://i.imgur.com/ZiMWnbV.png">
    </li>
    <li> 從左側選項中選擇「滑鼠與觸控式軌跡板」。</li>
    <li> 按一下「觸控式軌跡板選項」。</li>
    <li> 勾選「啟用拖移」旁的勾選框。 </li>
    <li> 從相關的彈出式選單中，選擇「三指拖曳」功能，旁邊就會出現剔號。</li>
    <li> 按一下「確定」。</li>
</ol><img src="https://i.imgur.com/rqhGf5r.png">



<div></div>

<h3>4. 像 iPhone 一樣用說話來打字 (聽寫) </h3>

<img src="https://help.apple.com/assets/5DB8A4A0094622D56C6D1279/5DB8A4AE094622D56C6D1281/zh_TW/30671b9e91fdd1b0040201b023745266.png">

圖片來自 <a href="https://support.apple.com/zh-tw/guide/mac-help/mh40584/mac">https://support.apple.com/zh-tw/guide/mac-help/mh40584/mac</a> 

<div></div>

可以在任何可輸入的位置聽寫文字. macOS 會將您的字詞傳送至 Apple 伺服器進行分析並轉換為文字, 也因此只能在有網路的使用使用. 開啟聽寫的步驟如下: 

<ol>
<li>開啟「系統偏好設定」的「鍵盤」.</li>
<img src="https://i.imgur.com/xDGGUaB.png">
    <li>點擊「聽寫」.</li>
    <li>按一下「開啟」。若有提示出現，按一下「啟用聽寫」。</li>
    <li>選擇聽寫啟用使用所使用的語言.</li>
    <li>選擇啟用聽寫的快速鍵. </li>
</ol>




<img src="https://i.imgur.com/DrZlGFt.png" width="780px">

<div class "practice">
    <label>在這練習</label>
    <textarea>"點我進入編輯模式:  使用 fu + fu 來啟動聽寫, 請注意不要影響旁人"</textarea>
</div>









以上是一些我常用或是有趣的 macOS 文字秘技, 歡迎留言告訴我你的想法.

參考資訊:
<ol>
    
 <li>apple - 為 Force Touch 觸控式軌跡板開啟「三指拖移」 - Apple 支援: https://support.apple.com/zh-tw/HT204609</li>
 <li>wiki - Force Touch - Wikipedia: https://en.wikipedia.org/wiki/Force_Touch</li>
<li>apple - 在 Mac 上聽寫訊息和文件 - Apple 支援:  https://support.apple.com/zh-tw/guide/mac-help/mh40584/mac</li>

</ol>
]]></content:encoded></item><item><guid isPermaLink="true">https://ytyubox.github.io/posts/2020/Publish-apply-GA-SEO</guid><title>Swift Publish 套用 Google Analytics 與 SEO</title><description>為 Publish 套用 Google 分析與搜尋引擎優化</description><link>https://ytyubox.github.io/posts/2020/Publish-apply-GA-SEO</link><pubDate>Thu, 9 Jan 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>Swift Publish 套用 Google Analytics 與 SEO</h1>]]></content:encoded></item><item><guid isPermaLink="true">https://ytyubox.github.io/posts/2020/Asyc-GitHub-exp</guid><title>使用 Async 輕量非同步套件鏈式調用非同步行為</title><description>Async explain and try to extend it</description><link>https://ytyubox.github.io/posts/2020/Asyc-GitHub-exp</link><pubDate>Mon, 6 Jan 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>使用 Async 輕量非同步套件鏈式調用非同步行為</h1><p>Async: <a href="https://github.com/duemunk/Async">github.com/duemunk/Async</a></p><p>2019 年介紹 <code>Combine</code> 時 <a href="https://ithelp.ithome.com.tw/users/20119945/ironman/2272">2019鐵人賽介紹 Combine 系列</a>, 對於連續的非同步事件的調用, 我們會遇到回呼地獄(Callback hell), 也就是多筆具相依的非同步步驟響應辦法.<br><br>## <code>Async</code> 的解法 相較於原本的 DispatchQueue 的版本:</p><pre><code><span class="type">DispatchQueue</span>.<span class="call">global</span>(qos: .<span class="dotAccess">userInitiated</span>).<span class="call">async</span> {
    <span class="keyword">let</span> value = <span class="number">10</span>
    <span class="type">DispatchQueue</span>.<span class="call">global</span>(qos: .<span class="dotAccess">background</span>).<span class="call">async</span> {
        <span class="keyword">let</span> text = <span class="string">"Score:</span> \(value)<span class="string">"</span>
        <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> {
            label.<span class="property">text</span> = text
        }
    }
}
</code></pre><pre><code><span class="type">Async</span>
.<span class="call">userInitiated</span> { <span class="number">10</span> }
.<span class="call">background</span> { <span class="string">"Score:</span> \($0)<span class="string">"</span>}
.<span class="call">main</span> { label.<span class="property">text</span> = $0 }
</code></pre><p><code>Async</code>很像瀑布一樣, 由上至下的思考非同步的執行流程.</p><h2><code>Async</code> 沒有對錯誤拋出處理 <code>throws</code></h2><p>在研究了一段時間發現, <code>Async</code> 很可惜的沒有對 <code>Error handle</code> 做處理, 決定研究了一下, 修改部分的程式碼, <a href="https://github.com/ytyubox/Async">fork repo</a>.</p><pre><code><span class="keyword">private class</span> Reference&lt;T&gt; {
        <span class="keyword">var</span> value: <span class="type">T</span>?
<span class="comment">/*新增*/</span>    <span class="keyword">var</span> error:<span class="type">Error</span>? 
<span class="comment">/*新增*/</span>    <span class="keyword">var</span> queue:<span class="type">GCD</span>?   
}
</code></pre><pre><code><span class="keyword">public struct</span> AsyncBlock&lt;In, Out&gt; {

    ...


    <span class="keyword">private static func</span> async&lt;O&gt;(after seconds: <span class="type">Double</span>? = <span class="keyword">nil</span>,
                                 block: <span class="keyword">@escaping</span> () <span class="keyword">throws</span> -&gt; <span class="type">O</span>,
                                 queue: <span class="type">GCD</span>) -&gt; <span class="type">AsyncBlock</span>&lt;<span class="type">Void</span>, <span class="type">O</span>&gt; {
        <span class="keyword">let</span> reference = <span class="type">Reference</span>&lt;<span class="type">O</span>&gt;()
<span class="comment">/*新增*/</span>    reference.<span class="property">queue</span> = queue
        <span class="keyword">let</span> block = <span class="type">DispatchWorkItem</span>(block: {
<span class="comment">/*新增*/</span>        <span class="keyword">do</span> {
<span class="comment">/*新增*/</span>            reference.<span class="property">value</span> = <span class="keyword">try</span> <span class="call">block</span>()
<span class="comment">/*新增*/</span>        }<span class="keyword">catch</span> {
<span class="comment">/*新增*/</span>            reference.<span class="property">error</span> = error
<span class="comment">/*新增*/</span>        }
        })
      ...
    }
 
    <span class="keyword">private func</span> chain&lt;O&gt;(after seconds: <span class="type">Double</span>? = <span class="keyword">nil</span>,
                          block chainingBlock: <span class="keyword">@escaping</span> (<span class="type">Out</span>) <span class="keyword">throws</span> -&gt; <span class="type">O</span>,
                          queue: <span class="type">GCD</span>) -&gt; <span class="type">AsyncBlock</span>&lt;<span class="type">Out</span>, <span class="type">O</span>&gt; {
        <span class="keyword">let</span> reference = <span class="type">Reference</span>&lt;<span class="type">O</span>&gt;()
<span class="comment">/*新增*/</span>            reference.<span class="property">queue</span> = queue
        <span class="keyword">let</span> dispatchWorkItem = <span class="type">DispatchWorkItem</span>(block: {
<span class="comment">/*新增*/</span>        <span class="keyword">guard let</span> value = <span class="keyword">self</span>.<span class="property">output_</span>.<span class="property">value</span> <span class="keyword">else</span> {
<span class="comment">/*新增*/</span>            <span class="keyword">return</span> reference.<span class="property">error</span> = <span class="keyword">self</span>.<span class="property">output_</span>.<span class="property">error</span>!
<span class="comment">/*新增*/</span>        }
<span class="comment">/*新增*/</span>        <span class="keyword">do</span> {
<span class="comment">/*新增*/</span>            reference.<span class="property">value</span> = <span class="keyword">try</span> <span class="call">chainingBlock</span>(value)
<span class="comment">/*新增*/</span>        } <span class="keyword">catch</span> {
<span class="comment">/*新增*/</span>            reference.<span class="property">error</span> = error
<span class="comment">/*新增*/</span>        }
        })

    ...
    }

...

}
</code></pre><p>如此一來, 就可以對 <code>AsyncBlock</code> 拓展 <code>catch(_:)</code></p><pre><code><span class="comment">/*新增*/</span>
<span class="keyword">@discardableResult
public func</span> `catch`(respondBlock: <span class="keyword">@escaping</span> (<span class="type">Error</span>) -&gt; <span class="type">Void</span>) -&gt; <span class="type">AsyncBlock</span>&lt;<span class="type">In</span>,<span class="type">Out</span>&gt; {
    <span class="keyword">let</span> queue = output_.<span class="property">queue</span>!.queue
    <span class="keyword">let</span> c = {
        <span class="keyword">if let</span> error = <span class="keyword">self</span>.<span class="property">output_</span>.<span class="property">error</span> {
            <span class="call">respondBlock</span>(error)
        }
    }
    <span class="keyword">let</span> item = <span class="type">DispatchWorkItem</span>(block: c)
    block.<span class="call">notify</span>(queue: queue, execute: item)
    <span class="keyword">return self</span>
}
</code></pre><p>實作單元測試:</p><pre><code><span class="keyword">func</span> testAsyncMainWithCatch() {
    <span class="keyword">let</span> expectation = <span class="keyword">self</span>.<span class="call">expectation</span>(description: <span class="string">"Expected on main queue"</span>)
    <span class="keyword">var</span> calledStuffAfterSinceAsync = <span class="keyword">false</span>
    <span class="type">Async</span>.<span class="call">main</span> {
        <span class="keyword">try self</span>.<span class="call">alwaysError</span>()
    }.<span class="keyword">catch</span> { (error) <span class="keyword">in</span>
        <span class="preprocessing">#if targetEnvironment(simulator)</span>
        <span class="call">XCTAssert</span>(<span class="type">Thread</span>.<span class="property">isMainThread</span>, <span class="string">"Should be on main thread (simulator)"</span>)
        <span class="preprocessing">#else</span>
        <span class="call">XCTAssertEqual</span>(<span class="call">qos_class_self</span>(), <span class="call">qos_class_main</span>())
        <span class="preprocessing">#endif</span>
        <span class="call">XCTAssert</span>(calledStuffAfterSinceAsync, <span class="string">"Should be async"</span>)
        expectation.<span class="call">fulfill</span>()
    }
    calledStuffAfterSinceAsync = <span class="keyword">true</span>
    waitForExpectations(timeout: timeMargin, handler: <span class="keyword">nil</span>)
}
</code></pre><p>以上, 於 fork 的 GitHub project 內持續補上 test case! GitHub 連結: https://github.com/ytyubox/Async</p>]]></content:encoded></item><item><guid isPermaLink="true">https://ytyubox.github.io/posts/2020/iOS-Vibration</guid><title>iOS 實機測試震動</title><description>iOS Vibration note</description><link>https://ytyubox.github.io/posts/2020/iOS-Vibration</link><pubDate>Sun, 5 Jan 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>iOS 實機測試震動</h1><img src="https://github.com/ytyubox/tryViber-iOS/blob/master/demo-tryViber.jpeg?raw=true"/><p>每次時間不可改，最小間隔 0.5 秒</p><pre><code><span class="keyword">import</span> AudioToolbox

<span class="type">AudioServicesPlayAlertSound</span>(<span class="type">SystemSoundID</span>(kSystemSoundID_Vibrate))
</code></pre><h2>套用 Swift 5.1 的 <code>Property Wrapper</code></h2><pre><code><span class="keyword">import</span> AudioToolbox

<span class="keyword">@propertyWrapper
struct</span> SoundId {
    <span class="keyword">typealias</span> Value = <span class="type">UInt32</span>
    <span class="keyword">var</span> projectedValue: <span class="type">SystemSoundID</span>
    <span class="keyword">var</span> wrappedValue: <span class="type">Value</span> {
        <span class="keyword">didSet</span> {
            projectedValue = .<span class="keyword">init</span>(<span class="keyword">self</span>.<span class="property">wrappedValue</span>)
        }
    }
    
    <span class="keyword">init</span>(wrappedValue: <span class="type">Value</span>) {
        <span class="keyword">self</span>.<span class="property">projectedValue</span> = <span class="type">SystemSoundID</span>(wrappedValue)
        <span class="keyword">self</span>.<span class="property">wrappedValue</span> = wrappedValue
    }
}

<span class="keyword">class</span> SOMECLASS {
    <span class="keyword">@SoundId var</span> currentSystemEffect = kSystemSoundID_Vibrate
    
    <span class="keyword">func</span> playSound() {
        <span class="type">AudioServicesPlaySystemSound</span>(<span class="keyword">self</span>.$currentSystemEffect)
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://ytyubox.github.io/posts/2020/01/04/Git-team-init</guid><title>新團隊建立 Git 指南 (一)</title><description>Git 團隊手冊中針對新團隊的章節</description><link>https://ytyubox.github.io/posts/2020/01/04/Git-team-init</link><pubDate>Sat, 4 Jan 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>新團隊建立 Git 指南 (一)</h1><img src="https://i.imgur.com/LLQU4xt.jpg"/><p>在 Git 團隊使用手冊中, 介紹了如何在多人團隊中建立 Git 的方式.</p><h2>1. 耐心與同情心</h2><p>有同情心的團隊會為新手留下說明操作程序的文件, 回答新人問題. "Help me, help you.", 就是專案領導人該有的口號!</p><p>目標: 一致性的部分都留下詳細的指引, 樣板及自動化腳本, 將標準之外的情況視為自己應該解決的程序問題.</p><img src="https://i.imgur.com/qvkTcc9.png"/><p>推薦影片教學 https://player.oreilly.com/videos/9781491912003</p><h2>2. 建立 Repository</h2><p>不論選擇 GitHub/GitLab, 第一需要考慮的問題是: 該用哪個賬號建立 Repo? 首先, 在 repo 的 URL 通常會以 <code>https://&lt;代管系統主機&gt;.com/&lt;REPO擁有者&gt;/</code>, 端看這個專案(repo) 是屬於自己或是或是所屬的機構(公司), 選擇專案的擁有者.</p><p>第二, 決定專案各種權限: 對於開源專案, <code>READ</code> 的權限是開發的, 但對於 <code>WRITE</code> 的權限分成組織開發者, 非組織貢獻者. 對於這些分別的最大差別, 最主要的分別是: 可以同意寫入的能力, 例如一位非組織貢獻者想貢獻一部份的 code modification, 若使用的是 <code>GitHub</code> 服務, 則必須 <code>fork</code> 一份在自己賬號的複製專案, 推送改動, 並發起 <code>Pull Request</code>, 由組織開發者同意是否同意寫入.</p><h2>3. 沒有寫入權限的專案成員對專案的貢獻步驟</h2><ol><li>not folk</li></ol><pre><code>git colne <span class="type">REPOURL REPO</span>
cd <span class="type">REPO</span>
git remote add personal <span class="type">MYREPOURL</span>
git branch my-proposal
git checkout my-proposal

# <span class="keyword">do</span> all the concreate change

git add <span class="type">FILE</span>
git commit -m 'finish change start porposal'
git push personal my-proposal
</code></pre><p>發起 Pull Request</p><ol start="2"><li>folk</li></ol><p>在專案託管系統 folk 一份在自己賬號之下</p><pre><code>git clone <span class="type">MYFORKURL REPO</span>
cd <span class="type">REPO</span>
git remote add <span class="type">REPOURL</span> offical
git branch my-proposal
git checkout my-proposal

# <span class="keyword">do</span> all the concreate change

git add <span class="type">FILE</span>
git commit -m 'finish change start porposal'
git push original my-proposal
</code></pre><p>一樣發起 Pull Request</p><p>下一篇將介紹維護者要如何處理 Pull Request</p>]]></content:encoded></item><item><guid isPermaLink="true">https://ytyubox.github.io/posts/2020/bulid-static-web-by-publish</guid><title>[#1] 如何透過 Publish 使用 100 % Swift code 建立 Blog</title><description>使用 Markdown 編寫文章, 利用 Publish 框架, 架設靜態網站</description><link>https://ytyubox.github.io/posts/2020/bulid-static-web-by-publish</link><pubDate>Wed, 1 Jan 2020 00:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>[#1] 如何透過 Publish 使用 100 % Swift code 建立 Blog</h1><p>起源: 2019 年, 接觸了剛起步的 <a href="https://www.swiftbysundell.com/">Swift by Sundell</a>, Sundell 是一個全職的作者, 不僅每週有固定的文章與 Podcast, 還不時的在各大 Swift 有關的演講分享, 而在 2019 年 12 月底, Sundell 推出了 <a href="https://github.com/JohnSundell/Publish">Publish</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/pAy6v4MEsnc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Jhon Sundell @SwiftServerConf, 2019/11</p><blockquote><p><code>Publish</code> 於 2020 年 1 月 版號是 <code>v0.1.0</code>, 代表 還有不少的功能還沒實現, Sundell 對於新功能是採用 <code>PR please</code> 的方式, 也就是不接受 issue, 只接受貢獻, 因此某種程度是更新較慢的.</p></blockquote><h2>Publish 框架環境與安裝</h2><ol><li>Swift 5.1</li><li>Swift Package manager: swift-tools-version:5.1</li><li>PublishCLI: Publish <code>v0.1.0</code></li></ol><p>Step 1: 安裝 <code>Publish</code></p><pre><code class="language-no-highlight">git clone https://github.com/JohnSundell/Publish.git
cd Publish
make
</code></pre><p>透過 <code>MakeFile</code>, 將安裝 <code>publish-cli</code> 至 <code>/usr/local/bin/</code>, 就可以使用 <code>publish</code></p><p>Step 2: 靜態網頁建立</p><pre><code class="language-no-highlight">mkdir __WEBSITE_NAME__ 
cd __WEBSITE_NAME__
publish new
</code></pre><p>透過 <code>PublishCLI</code> 建立 <code>Package.swift</code>, 之後可以用 XCode 編輯</p><h2>Publish 整體架構</h2><pre><code class="language-no-highlight">├── Content/
│   ├── index.md
│   └── posts/
│       ├── first-post.md
│       └── index.md
├── Package.swift
├── Resources/
└── Sources/
    └── __WEBSITE_NAME__/
        └── main.swift

</code></pre><p>Publish 框架下使用 <code>SPM</code> 來處理整個由 <code>Read *.md</code> ~&gt; <code>gen *.html, Theme.css</code> ~&gt; <code>Site metadata</code> 的過程, 程式相依資源是由 <code>Package.swift</code>控制, 分頁的讀取由 <code>main.swift</code>觸發, 文章的來源是相依從 <code>Content/</code> 取得, 主要設計由 main.swift 的 <code>try SomeWebsite().publish(...)</code>, 其中包含基本網站的 metaData, building 的介入 等.</p><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> Publish
<span class="keyword">import</span> Plot

<span class="comment">// This type acts as the configuration for your website.</span>
<span class="keyword">struct</span> Publishdemo: <span class="type">Website</span> {
    <span class="keyword">enum</span> SectionID: <span class="type">String</span>, <span class="type">WebsiteSectionID</span> {
        <span class="keyword">case</span> posts
    }

    <span class="keyword">struct</span> ItemMetadata: <span class="type">WebsiteItemMetadata</span> {
        <span class="comment">// Add any site-specific metadata that you want to use here.</span>
    }

    <span class="comment">// Update these properties to configure your website:</span>
    <span class="keyword">var</span> url = <span class="type">URL</span>(string: <span class="string">"https://your-website-url.com"</span>)!
    <span class="keyword">var</span> name = <span class="string">"Publishdemo"</span>
    <span class="keyword">var</span> description = <span class="string">"A description of Publishdemo"</span>
    <span class="keyword">var</span> language: <span class="type">Language</span> { .<span class="dotAccess">english</span> }
    <span class="keyword">var</span> imagePath: <span class="type">Path</span>? { <span class="keyword">nil</span> }
}

<span class="keyword">try</span> <span class="type">Publishdemo</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">foundation</span>)
</code></pre><h2>使用 GitHub page 作為 發佈空間</h2><p>GitHub 在每個賬號下可以有固定一個免費的靜態網站的空間, 原意是可以作為 open source 的 doc 或是基本的 intro, 而作為個人使用賬號, 可以用來作為個人的 blog. 1. 與GitHub 建立一個 repo, 名稱必須是<code>該賬號.github.io</code> , 這樣才可以被 GitHub 識別. 2. (很重要) 不要對哪個 repo 作任何 push. 3. 與你的 <code>main.swift</code> 內建的<code>.publish(withTheme:)</code>修改為一下</p><pre><code><span class="keyword">try</span> <span class="type">MyWebSite</span>().<span class="call">publish</span>(
    withTheme: .<span class="dotAccess">foundation</span>,
    deployedUsing: .<span class="call">git</span>(<span class="string">"https://github.com/ytyubox/ytyubox.github.io"</span>)
)
</code></pre><ol start="4"><li>使用 terminal 指令 <code>publish deploy</code> 直接上傳到 GitHub.</li></ol>]]></content:encoded></item></channel></rss>